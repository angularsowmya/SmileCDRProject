{"ast":null,"code":"export class ParentErrorStateMatcher {\n  isErrorState(control, form) {\n    const isSubmitted = !!(form && form.submitted);\n    const controlTouched = !!(control && (control.dirty || control.touched));\n    const controlInvalid = !!(control && control.invalid);\n    const parentInvalid = !!(control && control.parent && control.parent.invalid && (control.parent.dirty || control.parent.touched));\n    return isSubmitted || controlTouched && (controlInvalid || parentInvalid);\n  }\n\n}\nexport class PasswordValidator {\n  // Inspired on: http://plnkr.co/edit/Zcbg2T3tOxYmhxs7vaAm?p=preview\n  static areEqual(formGroup) {\n    let val;\n    let valid = true;\n\n    for (let key in formGroup.controls) {\n      if (formGroup.controls.hasOwnProperty(key)) {\n        let control = formGroup.controls[key];\n\n        if (val === undefined) {\n          val = control.value;\n        } else {\n          if (val !== control.value) {\n            valid = false;\n            break;\n          }\n        }\n      }\n    }\n\n    if (valid) {\n      return null;\n    }\n\n    return {\n      areEqual: true\n    };\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}