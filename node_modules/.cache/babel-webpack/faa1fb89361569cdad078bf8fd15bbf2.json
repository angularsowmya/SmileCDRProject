{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormGroup, Validators, FormControl } from '@angular/forms';\nimport { Country } from '../validators/country.model';\nimport { ParentErrorStateMatcher, PasswordValidator } from '../validators/password.validator';\nimport { PhoneValidator } from '../validators/phone.validator';\nimport { UsernameValidator } from '../validators/username.validator';\nlet PatientDetailsComponent = class PatientDetailsComponent {\n  constructor(fb, patientService) {\n    this.fb = fb;\n    this.patientService = patientService;\n    this.parentErrorStateMatcher = new ParentErrorStateMatcher();\n    this.genders = [\"Male\", \"Female\", \"Other\"];\n    this.countries = [new Country('UY', 'Uruguay'), new Country('US', 'United States'), new Country('AR', 'Argentina')];\n    this.validation_messages = {\n      'fullname': [{\n        type: 'required',\n        message: 'Full name is required'\n      }],\n      'bio': [{\n        type: 'maxlength',\n        message: 'Bio cannot be more than 256 characters long'\n      }],\n      'gender': [{\n        type: 'required',\n        message: 'Please select your gender'\n      }],\n      'birthday': [{\n        type: 'required',\n        message: 'Please insert your birthday'\n      }],\n      'phone': [{\n        type: 'required',\n        message: 'Phone is required'\n      }, {\n        type: 'validCountryPhone',\n        message: 'Phone incorrect for the country selected'\n      }]\n    };\n    this.account_validation_messages = {\n      'username': [{\n        type: 'required',\n        message: 'Username is required'\n      }, {\n        type: 'minlength',\n        message: 'Username must be at least 5 characters long'\n      }, {\n        type: 'maxlength',\n        message: 'Username cannot be more than 25 characters long'\n      }, {\n        type: 'pattern',\n        message: 'Your username must contain only numbers and letters'\n      }, {\n        type: 'validUsername',\n        message: 'Your username has already been taken'\n      }],\n      'email': [{\n        type: 'required',\n        message: 'Email is required'\n      }, {\n        type: 'pattern',\n        message: 'Enter a valid email'\n      }],\n      'confirm_password': [{\n        type: 'required',\n        message: 'Confirm password is required'\n      }, {\n        type: 'areEqual',\n        message: 'Password mismatch'\n      }],\n      'password': [{\n        type: 'required',\n        message: 'Password is required'\n      }, {\n        type: 'minlength',\n        message: 'Password must be at least 5 characters long'\n      }, {\n        type: 'pattern',\n        message: 'Your password must contain at least one uppercase, one lowercase, and one number'\n      }],\n      'terms': [{\n        type: 'pattern',\n        message: 'You must accept terms and conditions'\n      }]\n    };\n  }\n\n  ngOnInit() {\n    this.createForms();\n    this.getPatientDetails();\n  }\n\n  getPatientDetails() {\n    this.patientService.patientDetails().subscribe(response => {\n      console.log(response);\n    });\n  }\n\n  createForms() {\n    // matching passwords validation\n    this.matchingPasswordsGroup = new FormGroup({\n      password: new FormControl('', Validators.compose([Validators.minLength(5), Validators.required, Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9]+$')])),\n      confirm_password: new FormControl('', Validators.required)\n    }, formGroup => {\n      return PasswordValidator.areEqual(formGroup);\n    }); // country & phone validation\n\n    let country = new FormControl(this.countries[0], Validators.required);\n    let phone = new FormControl('', {\n      validators: Validators.compose([Validators.required, PhoneValidator.validCountryPhone(country)])\n    });\n    this.countryPhoneGroup = new FormGroup({\n      country: country,\n      phone: phone\n    }); // user details form validations\n\n    this.userDetailsForm = this.fb.group({\n      fullname: ['Homero Simpson', Validators.required],\n      bio: [\"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s\", Validators.maxLength(256)],\n      birthday: ['', Validators.required],\n      gender: new FormControl(this.genders[0], Validators.required),\n      countryPhone: this.countryPhoneGroup\n    }); // user links form validations\n\n    this.accountDetailsForm = this.fb.group({\n      username: new FormControl('', Validators.compose([UsernameValidator.validUsername, Validators.maxLength(25), Validators.minLength(5), Validators.pattern('^(?=.*[a-zA-Z])(?=.*[0-9])[a-zA-Z0-9]+$'), Validators.required])),\n      email: new FormControl('', Validators.compose([Validators.required, Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')])),\n      matchingPasswords: this.matchingPasswordsGroup,\n      terms: new FormControl(false, Validators.pattern('true'))\n    });\n  }\n\n  onSubmitAccountDetails(value) {\n    console.log(value);\n  }\n\n  onSubmitUserDetails(value) {\n    console.log(value);\n  }\n\n};\nPatientDetailsComponent = __decorate([Component({\n  selector: 'app-forms-page',\n  templateUrl: './forms.component.html',\n  styleUrls: ['./forms.component.scss']\n})], PatientDetailsComponent);\nexport { PatientDetailsComponent };","map":null,"metadata":{},"sourceType":"module"}